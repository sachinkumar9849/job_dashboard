{"ast":null,"code":"import{FormRow,FormRowSelect}from'../../components';import Wrapper from'../../assets/wrappers/DashboardFormPage';import{useSelector,useDispatch}from'react-redux';import{toast}from'react-toastify';import{handleChange,clearValues,createJob,editJob}from'../../features/job/jobSlice';import{useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddJob=function AddJob(){var _useSelector=useSelector(function(store){return store.job;}),isLoading=_useSelector.isLoading,position=_useSelector.position,company=_useSelector.company,jobLocation=_useSelector.jobLocation,jobType=_useSelector.jobType,jobTypeOptions=_useSelector.jobTypeOptions,status=_useSelector.status,statusOptions=_useSelector.statusOptions,isEditing=_useSelector.isEditing,editJobId=_useSelector.editJobId;var _useSelector2=useSelector(function(store){return store.user;}),user=_useSelector2.user;var dispatch=useDispatch();var handleSubmit=function handleSubmit(e){e.preventDefault();if(!position||!company||!jobLocation){toast.error('Please fill out all fields');return;}if(isEditing){dispatch(editJob({jobId:editJobId,job:{position:position,company:company,jobLocation:jobLocation,jobType:jobType,status:status}}));return;}dispatch(createJob({position:position,company:company,jobLocation:jobLocation,jobType:jobType,status:status}));};var handleJobInput=function handleJobInput(e){var name=e.target.name;var value=e.target.value;dispatch(handleChange({name:name,value:value}));};useEffect(function(){if(!isEditing){dispatch(handleChange({name:'jobLocation',value:user.location}));}},[]);return/*#__PURE__*/_jsx(Wrapper,{children:/*#__PURE__*/_jsxs(\"form\",{className:\"form\",children:[/*#__PURE__*/_jsx(\"h3\",{children:isEditing?'edit job':'add job'}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-center\",children:[/*#__PURE__*/_jsx(FormRow,{type:\"text\",name:\"position\",value:position,handleChange:handleJobInput}),/*#__PURE__*/_jsx(FormRow,{type:\"text\",name:\"company\",value:company,handleChange:handleJobInput}),/*#__PURE__*/_jsx(FormRow,{type:\"text\",name:\"jobLocation\",labelText:\"job location\",value:jobLocation,handleChange:handleJobInput}),/*#__PURE__*/_jsx(FormRowSelect,{name:\"status\",value:status,handleChange:handleJobInput,list:statusOptions}),/*#__PURE__*/_jsx(FormRowSelect,{name:\"jobType\",labelText:\"job type\",value:jobType,handleChange:handleJobInput,list:jobTypeOptions}),/*#__PURE__*/_jsxs(\"div\",{className:\"btn-container\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-block clear-btn\",onClick:function onClick(){return dispatch(clearValues());},children:\"clear\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-block submit-btn\",onClick:handleSubmit,disabled:isLoading,children:\"submit\"})]})]})]})});};export default AddJob;","map":{"version":3,"names":["FormRow","FormRowSelect","Wrapper","useSelector","useDispatch","toast","handleChange","clearValues","createJob","editJob","useEffect","AddJob","store","job","isLoading","position","company","jobLocation","jobType","jobTypeOptions","status","statusOptions","isEditing","editJobId","user","dispatch","handleSubmit","e","preventDefault","error","jobId","handleJobInput","name","target","value","location"],"sources":["C:/Reactjs/redux-toolkit-jobster/src/pages/dashboard/AddJob.js"],"sourcesContent":["import { FormRow, FormRowSelect } from '../../components';\r\nimport Wrapper from '../../assets/wrappers/DashboardFormPage';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  handleChange,\r\n  clearValues,\r\n  createJob,\r\n  editJob,\r\n} from '../../features/job/jobSlice';\r\nimport { useEffect } from 'react';\r\nconst AddJob = () => {\r\n  const {\r\n    isLoading,\r\n    position,\r\n    company,\r\n    jobLocation,\r\n    jobType,\r\n    jobTypeOptions,\r\n    status,\r\n    statusOptions,\r\n    isEditing,\r\n    editJobId,\r\n  } = useSelector((store) => store.job);\r\n  const { user } = useSelector((store) => store.user);\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!position || !company || !jobLocation) {\r\n      toast.error('Please fill out all fields');\r\n      return;\r\n    }\r\n    if (isEditing) {\r\n      dispatch(\r\n        editJob({\r\n          jobId: editJobId,\r\n          job: { position, company, jobLocation, jobType, status },\r\n        })\r\n      );\r\n      return;\r\n    }\r\n    dispatch(createJob({ position, company, jobLocation, jobType, status }));\r\n  };\r\n\r\n  const handleJobInput = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    dispatch(handleChange({ name, value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isEditing) {\r\n      dispatch(\r\n        handleChange({\r\n          name: 'jobLocation',\r\n          value: user.location,\r\n        })\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <form className='form'>\r\n        <h3>{isEditing ? 'edit job' : 'add job'}</h3>\r\n        <div className='form-center'>\r\n          {/* position */}\r\n          <FormRow\r\n            type='text'\r\n            name='position'\r\n            value={position}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* company */}\r\n          <FormRow\r\n            type='text'\r\n            name='company'\r\n            value={company}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* jobLocation */}\r\n          <FormRow\r\n            type='text'\r\n            name='jobLocation'\r\n            labelText='job location'\r\n            value={jobLocation}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* status */}\r\n          <FormRowSelect\r\n            name='status'\r\n            value={status}\r\n            handleChange={handleJobInput}\r\n            list={statusOptions}\r\n          />\r\n          {/* job type*/}\r\n          <FormRowSelect\r\n            name='jobType'\r\n            labelText='job type'\r\n            value={jobType}\r\n            handleChange={handleJobInput}\r\n            list={jobTypeOptions}\r\n          />\r\n          <div className='btn-container'>\r\n            <button\r\n              type='button'\r\n              className='btn btn-block clear-btn'\r\n              onClick={() => dispatch(clearValues())}\r\n            >\r\n              clear\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-block submit-btn'\r\n              onClick={handleSubmit}\r\n              disabled={isLoading}\r\n            >\r\n              submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default AddJob;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}