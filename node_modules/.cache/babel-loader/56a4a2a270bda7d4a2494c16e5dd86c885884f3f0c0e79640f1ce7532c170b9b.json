{"ast":null,"code":"var _jsxFileName = \"C:\\\\Reactjs\\\\job-app\\\\src\\\\pages\\\\dashboard\\\\AddJob.js\",\n  _s = $RefreshSig$();\nimport { FormRow, FormRowSelect } from '../../components';\nimport Wrapper from '../../assets/wrappers/DashboardFormPage';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { handleChange, clearValues, createJob, editJob } from '../../features/job/jobSlice';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddJob = () => {\n  _s();\n  const {\n    isLoading,\n    position,\n    company,\n    jobLocation,\n    jobType,\n    jobTypeOptions,\n    status,\n    statusOptions,\n    isEditing,\n    editJobId\n  } = useSelector(store => store.job);\n  const {\n    user\n  } = useSelector(store => store.user);\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!position || !company || !jobLocation) {\n      toast.error('Please fill out all fields');\n      return;\n    }\n    if (isEditing) {\n      dispatch(editJob({\n        jobId: editJobId,\n        job: {\n          position,\n          company,\n          jobLocation,\n          jobType,\n          status\n        }\n      }));\n      return;\n    }\n    dispatch(createJob({\n      position,\n      company,\n      jobLocation,\n      jobType,\n      status\n    }));\n  };\n  const handleJobInput = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    dispatch(handleChange({\n      name,\n      value\n    }));\n  };\n  useEffect(() => {\n    if (!isEditing) {\n      dispatch(handleChange({\n        name: 'jobLocation',\n        value: user.location\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: isEditing ? 'edit job' : 'add job'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-center\",\n        children: [/*#__PURE__*/_jsxDEV(FormRow, {\n          type: \"text\",\n          name: \"position\",\n          value: position,\n          handleChange: handleJobInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormRow, {\n          type: \"text\",\n          name: \"company\",\n          value: company,\n          handleChange: handleJobInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormRow, {\n          type: \"text\",\n          name: \"jobLocation\",\n          labelText: \"job location\",\n          value: jobLocation,\n          handleChange: handleJobInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormRowSelect, {\n          name: \"status\",\n          value: status,\n          handleChange: handleJobInput,\n          list: statusOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormRowSelect, {\n          name: \"jobType\",\n          labelText: \"job type\",\n          value: jobType,\n          handleChange: handleJobInput,\n          list: jobTypeOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-block clear-btn\",\n            onClick: () => dispatch(clearValues()),\n            children: \"clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-block submit-btn\",\n            onClick: handleSubmit,\n            disabled: isLoading,\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AddJob, \"OdrMv0MPUkYDhtgycCTXJN75Vqw=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = AddJob;\nexport default AddJob;\nvar _c;\n$RefreshReg$(_c, \"AddJob\");","map":{"version":3,"names":["FormRow","FormRowSelect","Wrapper","useSelector","useDispatch","toast","handleChange","clearValues","createJob","editJob","useEffect","AddJob","isLoading","position","company","jobLocation","jobType","jobTypeOptions","status","statusOptions","isEditing","editJobId","store","job","user","dispatch","handleSubmit","e","preventDefault","error","jobId","handleJobInput","name","target","value","location"],"sources":["C:/Reactjs/job-app/src/pages/dashboard/AddJob.js"],"sourcesContent":["import { FormRow, FormRowSelect } from '../../components';\r\nimport Wrapper from '../../assets/wrappers/DashboardFormPage';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  handleChange,\r\n  clearValues,\r\n  createJob,\r\n  editJob,\r\n} from '../../features/job/jobSlice';\r\nimport { useEffect } from 'react';\r\nconst AddJob = () => {\r\n  const {\r\n    isLoading,\r\n    position,\r\n    company,\r\n    jobLocation,\r\n    jobType,\r\n    jobTypeOptions,\r\n    status,\r\n    statusOptions,\r\n    isEditing,\r\n    editJobId,\r\n  } = useSelector((store) => store.job);\r\n  const { user } = useSelector((store) => store.user);\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!position || !company || !jobLocation) {\r\n      toast.error('Please fill out all fields');\r\n      return;\r\n    }\r\n    if (isEditing) {\r\n      dispatch(\r\n        editJob({\r\n          jobId: editJobId,\r\n          job: { position, company, jobLocation, jobType, status },\r\n        })\r\n      );\r\n      return;\r\n    }\r\n    dispatch(createJob({ position, company, jobLocation, jobType, status }));\r\n  };\r\n\r\n  const handleJobInput = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    dispatch(handleChange({ name, value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isEditing) {\r\n      dispatch(\r\n        handleChange({\r\n          name: 'jobLocation',\r\n          value: user.location,\r\n        })\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <form className='form'>\r\n        <h3>{isEditing ? 'edit job' : 'add job'}</h3>\r\n        <div className='form-center'>\r\n          {/* position */}\r\n          <FormRow\r\n            type='text'\r\n            name='position'\r\n            value={position}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* company */}\r\n          <FormRow\r\n            type='text'\r\n            name='company'\r\n            value={company}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* jobLocation */}\r\n          <FormRow\r\n            type='text'\r\n            name='jobLocation'\r\n            labelText='job location'\r\n            value={jobLocation}\r\n            handleChange={handleJobInput}\r\n          />\r\n          {/* status */}\r\n          <FormRowSelect\r\n            name='status'\r\n            value={status}\r\n            handleChange={handleJobInput}\r\n            list={statusOptions}\r\n          />\r\n          {/* job type*/}\r\n          <FormRowSelect\r\n            name='jobType'\r\n            labelText='job type'\r\n            value={jobType}\r\n            handleChange={handleJobInput}\r\n            list={jobTypeOptions}\r\n          />\r\n          <div className='btn-container'>\r\n            <button\r\n              type='button'\r\n              className='btn btn-block clear-btn'\r\n              onClick={() => dispatch(clearValues())}\r\n            >\r\n              clear\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-block submit-btn'\r\n              onClick={handleSubmit}\r\n              disabled={isLoading}\r\n            >\r\n              submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default AddJob;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}